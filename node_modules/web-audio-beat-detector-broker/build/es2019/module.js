import { createBroker } from 'broker-factory';
import { isSupported } from 'standardized-audio-context';
import { render } from './helpers/render';
/*
 * @todo Explicitly referencing the barrel file seems to be necessary when enabling the
 * isolatedModules compiler option.
 */
export * from './types/index';
export { isSupported };
export const wrap = createBroker({
    analyze: ({ call }) => {
        return async (...args) => {
            var _a;
            const [audioBuffer, offsetOrTempoSettings, durationOrTempoSettings] = args;
            const offset = typeof offsetOrTempoSettings === 'number' ? offsetOrTempoSettings : 0;
            const duration = typeof durationOrTempoSettings === 'number' ? durationOrTempoSettings : audioBuffer.duration - offset;
            const { channelData, sampleRate } = await render(audioBuffer, offset, duration);
            const tempoSettings = typeof offsetOrTempoSettings === 'object'
                ? offsetOrTempoSettings
                : typeof durationOrTempoSettings === 'object'
                    ? durationOrTempoSettings
                    : ((_a = args[3]) !== null && _a !== void 0 ? _a : null);
            return call('analyze', { channelData, sampleRate, ...(tempoSettings === null ? tempoSettings : { tempoSettings }) }, [
                channelData.buffer
            ]);
        };
    },
    guess: ({ call }) => {
        return async (...args) => {
            var _a;
            const [audioBuffer, offsetOrTempoSettings, durationOrTempoSettings] = args;
            const offset = typeof offsetOrTempoSettings === 'number' ? offsetOrTempoSettings : 0;
            const duration = typeof durationOrTempoSettings === 'number' ? durationOrTempoSettings : audioBuffer.duration - offset;
            const { channelData, sampleRate } = await render(audioBuffer, offset, duration);
            const tempoSettings = typeof offsetOrTempoSettings === 'object'
                ? offsetOrTempoSettings
                : typeof durationOrTempoSettings === 'object'
                    ? durationOrTempoSettings
                    : ((_a = args[3]) !== null && _a !== void 0 ? _a : null);
            return call('guess', { channelData, sampleRate, ...(tempoSettings === null ? tempoSettings : { tempoSettings }) }, [
                channelData.buffer
            ]);
        };
    }
});
export const load = (url) => {
    const worker = new Worker(url);
    return wrap(worker);
};
//# sourceMappingURL=module.js.map