(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('worker-factory'), require('@babel/runtime/helpers/toConsumableArray')) :
    typeof define === 'function' && define.amd ? define(['worker-factory', '@babel/runtime/helpers/toConsumableArray'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.workerFactory, global._toConsumableArray));
})(this, (function (workerFactory, _toConsumableArray) { 'use strict';

    var countIntervalsBetweenNearbyPeaks = function countIntervalsBetweenNearbyPeaks(peaks) {
      var intervalBuckets = [];
      peaks.forEach(function (peak, index) {
        var length = Math.min(peaks.length - index, 10);
        var _loop = function _loop() {
          var interval = peaks[index + i] - peak;
          var foundInterval = intervalBuckets.some(function (intervalBucket) {
            if (intervalBucket.interval === interval) {
              intervalBucket.peaks.push(peak);
              return true;
            }
            return false;
          });
          if (!foundInterval) {
            intervalBuckets.push({
              interval: interval,
              peaks: [peak]
            });
          }
        };
        for (var i = 1; i < length; i += 1) {
          _loop();
        }
      });
      return intervalBuckets;
    };

    var getMaximumValue = function getMaximumValue(channelData) {
      var maximumValue = 0;
      var length = channelData.length;
      for (var i = 0; i < length; i += 1) {
        if (channelData[i] > maximumValue) {
          maximumValue = channelData[i];
        }
      }
      return maximumValue;
    };

    var getPeaksAtThreshold = function getPeaksAtThreshold(channelData, threshold, sampleRate) {
      var length = channelData.length;
      var peaks = [];
      var lastValueWasAboveThreshold = false;
      for (var i = 0; i < length; i += 1) {
        if (channelData[i] > threshold) {
          lastValueWasAboveThreshold = true;
        } else if (lastValueWasAboveThreshold) {
          lastValueWasAboveThreshold = false;
          peaks.push(i - 1);
          // Skip 0.25 seconds forward to get past this peak.
          i += sampleRate / 4 - 1;
        }
      }
      // Add the last value in the unlikely case it was peak.
      if (lastValueWasAboveThreshold) {
        peaks.push(length - 1);
      }
      return peaks;
    };

    var groupNeighborsByTempo = function groupNeighborsByTempo(intervalBuckets, sampleRate) {
      var tempoSettings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var _a, _b;
      var maxTempo = Math.max(0, (_a = tempoSettings.maxTempo) !== null && _a !== void 0 ? _a : 180);
      var minTempo = Math.max(0, (_b = tempoSettings.minTempo) !== null && _b !== void 0 ? _b : 90);
      var tempoBuckets = [];
      intervalBuckets.forEach(function (intervalBucket) {
        // Convert an interval to a tempo (aka BPM).
        var theoreticalTempo = 60 / (intervalBucket.interval / sampleRate);
        while (theoreticalTempo < minTempo) {
          theoreticalTempo *= 2;
        }
        while (theoreticalTempo > maxTempo) {
          theoreticalTempo /= 2;
        }
        if (theoreticalTempo < minTempo) {
          return;
        }
        var foundTempo = false;
        var score = intervalBucket.peaks.length;
        tempoBuckets.forEach(function (tempoBucket) {
          if (tempoBucket.tempo === theoreticalTempo) {
            tempoBucket.score += intervalBucket.peaks.length;
            tempoBucket.peaks = [].concat(_toConsumableArray(tempoBucket.peaks), _toConsumableArray(intervalBucket.peaks));
            foundTempo = true;
          }
          if (tempoBucket.tempo > theoreticalTempo - 0.5 && tempoBucket.tempo < theoreticalTempo + 0.5) {
            var tempoDifference = Math.abs(tempoBucket.tempo - theoreticalTempo) * 2;
            score += (1 - tempoDifference) * tempoBucket.peaks.length;
            tempoBucket.score += (1 - tempoDifference) * intervalBucket.peaks.length;
          }
        });
        if (!foundTempo) {
          tempoBuckets.push({
            peaks: intervalBucket.peaks,
            score: score,
            tempo: theoreticalTempo
          });
        }
      });
      return tempoBuckets;
    };

    var MINUMUM_NUMBER_OF_PEAKS = 30;
    var computeTempoBuckets = function computeTempoBuckets(channelData, sampleRate, tempoSettings) {
      var maximumValue = getMaximumValue(channelData);
      var minimumThreshold = maximumValue * 0.3;
      var peaks = [];
      var threshold = maximumValue - maximumValue * 0.05;
      if (maximumValue > 0.25) {
        while (peaks.length < MINUMUM_NUMBER_OF_PEAKS && threshold >= minimumThreshold) {
          peaks = getPeaksAtThreshold(channelData, threshold, sampleRate);
          threshold -= maximumValue * 0.05;
        }
      }
      var intervalBuckets = countIntervalsBetweenNearbyPeaks(peaks);
      var tempoBuckets = groupNeighborsByTempo(intervalBuckets, sampleRate, tempoSettings);
      tempoBuckets.sort(function (a, b) {
        return b.score - a.score;
      });
      return tempoBuckets;
    };

    var analyze = function analyze(channelData, sampleRate, tempoSettings) {
      var tempoBuckets = computeTempoBuckets(channelData, sampleRate, tempoSettings);
      if (tempoBuckets.length === 0) {
        throw new Error('The given channelData does not contain any detectable beats.');
      }
      return tempoBuckets[0].tempo;
    };

    var guess = function guess(channelData, sampleRate, tempoSettings) {
      var tempoBuckets = computeTempoBuckets(channelData, sampleRate, tempoSettings);
      if (tempoBuckets.length === 0) {
        throw new Error('The given channelData does not contain any detectable beats.');
      }
      var _tempoBuckets$ = tempoBuckets[0],
        peaks = _tempoBuckets$.peaks,
        tempo = _tempoBuckets$.tempo;
      var bpm = Math.round(tempo);
      var secondsPerBeat = 60 / bpm;
      peaks.sort(function (a, b) {
        return a - b;
      });
      var offset = peaks[0] / sampleRate;
      while (offset > secondsPerBeat) {
        offset -= secondsPerBeat;
      }
      return {
        bpm: bpm,
        offset: offset,
        tempo: tempo
      };
    };

    workerFactory.createWorker(self, {
      analyze: function analyze$1(_ref) {
        var channelData = _ref.channelData,
          sampleRate = _ref.sampleRate,
          tempoSettings = _ref.tempoSettings;
        return {
          result: analyze(channelData, sampleRate, tempoSettings)
        };
      },
      guess: function guess$1(_ref2) {
        var channelData = _ref2.channelData,
          sampleRate = _ref2.sampleRate,
          tempoSettings = _ref2.tempoSettings;
        return {
          result: guess(channelData, sampleRate, tempoSettings)
        };
      }
    });

}));
